GIT Cheat sheet
1) Check last commit :
	$git log --name-status HEAD^..HEAD
	
2) Check the changes post adding, staged but not committed :
	$git diff --cached
	
3) Views changes post commits(a plenty) before pushing
	$git diff --stat origin/branchname

4) Get the changes made to a file in the recent commit
	$git diff HEAD^^ myfile (change HEAD to point to commit that you want to know the changes made to a file)

5) Show the difference between 2 branches 
	$git diff branch_1..branch_2

6) Show all the remotes 
	$git remote -v

7) Sync a file with a particular branch
	$git checkout -- theirs <branch name> -- <path to file>

8) Modify the last commit :
	$git commit --amend

9) Show the recent commit details
	$git show HEAD

10) Rebase interactively"
	$git rebase -i HEAD~N
	N is an int, the number of commits behind which you want to rebase

11) Rebase WRT a branch
	$git rebase <branch1> <branch2>

12) Check local unstaged changes,
	$git diff --exit-code

13) List all the branches in a specific remote :
	$git remote show <name of the remote>
	$git ls-remote --heads <name of the remote>
	$git branch -r
14) Do away with uncommited changes :
	$git stash

15) Revert a specific file to specific version
	$git checkout <version name> <file name>

16) List all commits for a specific file
	$git log --follow filename

17) Roll back to a specific commit in the history
	$git reset --hard <SOME-COMMIT>

18) Start ignoring changes made to a file
	$git update-index --assume-unchanged path/to/file

19) Resuming tracking changes to a file
	$git update-index --no-assume-unchanged path/to/file

20) Pull a collaborator's branch and start working on it :
	$git remote add <name_of_remote>
	$git pull <name_of_remote> 
	$git checkout <name_of_remote>/<name_of_branch>
	$git checkout -b <new_branch>
	Now, you would be in a new branch, from where you can continue to work on where the colloborator left
	Once you're done, you can commit and push, as usual

21) Transfer newer commits to a new branch
	$git branch <new_branch>
	$git reset --hard HEAD~N
	$git checkout <new_branch>

22) Transfer newer commits on master to existing branch
	$git checkout <existingbranch>
	$git merge master
	$git checkout master
	$git reset --hard HEAD~N
	$git checkout <existingbranch>

The above two can also be done with hash of the commit as well!

23) Undo a ```$git add```:
	$git reset

24) Incase, you want to reset a specific file, 
	$git reset <Path_to_file>

25) Make existing branch track a remote branch:
	$git branch --set-upstream-to=upstream/<local_branch>

26) Edit commit messages:
	$git commit --amend -m "New commit message"

27) Force overwrite local files on pull:
	$git fetch --all
	$git reset --hard origin/<branch_name>

28) Remove Local untracked files:
	$git -f -n

